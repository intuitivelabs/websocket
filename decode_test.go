package websocket

import (
	"bytes"
	"os"
	"testing"
)

func readPkt(dirName, fileName string, b []byte) (int, error) {
	file, fsErr := os.Open(dirName + "/" + fileName)
	if fsErr != nil {
		return 0, fsErr
	}
	n, readErr := file.Read(b[:])
	return n, readErr
}

func TestDecoder(t *testing.T) {
	// set-up if needed
	var plainPkt, maskedPkt [2048]byte
	frame := NewFrame(10)
	dirName := "test_files"
	fileName := "404"
	plainPktCnt, readErr := readPkt(dirName, fileName, plainPkt[:])
	if readErr != nil {
		t.Fatalf(`could not read data file "%s/%s": %s`, dirName, fileName, readErr)
	}
	fileName = "register"
	maskedPktCnt, readErr := readPkt(dirName, fileName, maskedPkt[:])
	if readErr != nil {
		t.Fatalf(`could not read data file "%s/%s": %s`, dirName, fileName, readErr)
	}
	t.Run("plain full", func(t *testing.T) {
		pktBytes := []byte{
			0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x20,
			0x34, 0x30, 0x34, 0x20, 0x4e, 0x6f, 0x74, 0x20,
			0x66, 0x6f, 0x75, 0x6e, 0x64, 0x0d, 0x0a, 0x56,
			0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f,
			0x32, 0x2e, 0x30, 0x2f, 0x57, 0x53, 0x53, 0x20,
			0x6d, 0x38, 0x6f, 0x67, 0x6f, 0x75, 0x66, 0x6b,
			0x76, 0x6f, 0x6b, 0x6a, 0x2e, 0x69, 0x6e, 0x76,
			0x61, 0x6c, 0x69, 0x64, 0x3b, 0x62, 0x72, 0x61,
			0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47,
			0x34, 0x62, 0x4b, 0x36, 0x38, 0x31, 0x31, 0x33,
			0x37, 0x39, 0x3b, 0x72, 0x65, 0x63, 0x65, 0x69,
			0x76, 0x65, 0x64, 0x3d, 0x3a, 0x3a, 0x66, 0x66,
			0x66, 0x66, 0x3a, 0x31, 0x37, 0x32, 0x2e, 0x33,
			0x31, 0x2e, 0x32, 0x33, 0x2e, 0x31, 0x33, 0x36,
			0x0d, 0x0a, 0x54, 0x6f, 0x3a, 0x20, 0x3c, 0x73,
			0x69, 0x70, 0x3a, 0x76, 0x6c, 0x61, 0x64, 0x61,
			0x40, 0x69, 0x6e, 0x74, 0x6c, 0x61, 0x62, 0x73,
			0x2e, 0x74, 0x65, 0x73, 0x74, 0x3e, 0x3b, 0x74,
			0x61, 0x67, 0x3d, 0x32, 0x35, 0x30, 0x32, 0x34,
			0x32, 0x31, 0x34, 0x2d, 0x36, 0x31, 0x36, 0x35,
			0x36, 0x38, 0x42, 0x43, 0x30, 0x30, 0x30, 0x32,
			0x46, 0x46, 0x45, 0x43, 0x2d, 0x39, 0x42, 0x37,
			0x44, 0x42, 0x37, 0x30, 0x30, 0x0d, 0x0a, 0x46,
			0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x22, 0x76, 0x6c,
			0x61, 0x64, 0x61, 0x22, 0x20, 0x3c, 0x73, 0x69,
			0x70, 0x3a, 0x76, 0x6c, 0x61, 0x64, 0x61, 0x40,
			0x69, 0x6e, 0x74, 0x6c, 0x61, 0x62, 0x73, 0x2e,
			0x74, 0x65, 0x73, 0x74, 0x3e, 0x3b, 0x74, 0x61,
			0x67, 0x3d, 0x6b, 0x32, 0x70, 0x71, 0x32, 0x35,
			0x62, 0x70, 0x38, 0x72, 0x0d, 0x0a, 0x43, 0x61,
			0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x66,
			0x38, 0x69, 0x67, 0x76, 0x37, 0x6f, 0x74, 0x62,
			0x33, 0x39, 0x73, 0x70, 0x67, 0x31, 0x75, 0x70,
			0x6c, 0x37, 0x6b, 0x6d, 0x35, 0x0d, 0x0a, 0x43,
			0x53, 0x65, 0x71, 0x3a, 0x20, 0x31, 0x20, 0x52,
			0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x0d,
			0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
			0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a,
			0x20, 0x30, 0x0d, 0x0a, 0x0d, 0x0a,
		}
		if offs, err := frame.Decode(plainPkt[:], 0); err != ErrHdrOk {
			t.Fatalf("decode error %s", err)
		} else if offs != int(frame.Len()) {
			t.Fatalf("expected offs: %d, got offs: %d", int(frame.Len()), offs)
		}
		var dst [2048]byte
		if pd, length, err := frame.PayloadData(dst[:], plainPkt[:]); err != nil {
			t.Fatalf("frame processing error: %s", err)
		} else if !bytes.Equal(pd[0:length], pktBytes) {
			t.Fatalf("content mismatch, expected:\n%v\ngot:\n%v", string(pktBytes), string(pd[0:length]))
		}
	})
	t.Run("plain partial", func(t *testing.T) {
		frame.Reset()
		if offs, err := frame.Decode(plainPkt[0:3], 0); err != ErrHdrMoreBytes {
			t.Fatalf("decode error %s", err)
		} else if offs != 0 {
			t.Fatalf("decode error %s", err)
		}
		if offs, err := frame.Decode(plainPkt[0:4], 0); err != ErrDataMoreBytes {
			t.Fatalf("decode error %s", err)
		} else if offs != 0 {
			t.Fatalf("decode error %s", err)
		}
		if offs, err := frame.Decode(plainPkt[0:100], 0); err != ErrDataMoreBytes {
			t.Fatalf("decode error %s", err)
		} else if offs != 0 {
			t.Fatalf("decode error %s", err)
		}
		if offs, err := frame.Decode(plainPkt[0:314], 0); err != ErrHdrOk {
			t.Fatalf("decode error %s", err)
		} else if offs != plainPktCnt {
			t.Fatalf("decode error %s", err)
		}
	})
	t.Run("masked full", func(t *testing.T) {
		pktBytes := []byte{
			0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52,
			0x20, 0x73, 0x69, 0x70, 0x3a, 0x69, 0x6e, 0x74,
			0x6c, 0x61, 0x62, 0x73, 0x2e, 0x74, 0x65, 0x73,
			0x74, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e,
			0x30, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20,
			0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f,
			0x57, 0x53, 0x53, 0x20, 0x6d, 0x38, 0x6f, 0x67,
			0x6f, 0x75, 0x66, 0x6b, 0x76, 0x6f, 0x6b, 0x6a,
			0x2e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
			0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d,
			0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x36,
			0x38, 0x31, 0x31, 0x33, 0x37, 0x39, 0x0d, 0x0a,
			0x4d, 0x61, 0x78, 0x2d, 0x46, 0x6f, 0x72, 0x77,
			0x61, 0x72, 0x64, 0x73, 0x3a, 0x20, 0x36, 0x39,
			0x0d, 0x0a, 0x54, 0x6f, 0x3a, 0x20, 0x3c, 0x73,
			0x69, 0x70, 0x3a, 0x76, 0x6c, 0x61, 0x64, 0x61,
			0x40, 0x69, 0x6e, 0x74, 0x6c, 0x61, 0x62, 0x73,
			0x2e, 0x74, 0x65, 0x73, 0x74, 0x3e, 0x0d, 0x0a,
			0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x22, 0x76,
			0x6c, 0x61, 0x64, 0x61, 0x22, 0x20, 0x3c, 0x73,
			0x69, 0x70, 0x3a, 0x76, 0x6c, 0x61, 0x64, 0x61,
			0x40, 0x69, 0x6e, 0x74, 0x6c, 0x61, 0x62, 0x73,
			0x2e, 0x74, 0x65, 0x73, 0x74, 0x3e, 0x3b, 0x74,
			0x61, 0x67, 0x3d, 0x6b, 0x32, 0x70, 0x71, 0x32,
			0x35, 0x62, 0x70, 0x38, 0x72, 0x0d, 0x0a, 0x43,
			0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20,
			0x66, 0x38, 0x69, 0x67, 0x76, 0x37, 0x6f, 0x74,
			0x62, 0x33, 0x39, 0x73, 0x70, 0x67, 0x31, 0x75,
			0x70, 0x6c, 0x37, 0x6b, 0x6d, 0x35, 0x0d, 0x0a,
			0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x31, 0x20,
			0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52,
			0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
			0x74, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a,
			0x65, 0x34, 0x61, 0x71, 0x62, 0x6a, 0x74, 0x69,
			0x40, 0x6d, 0x38, 0x6f, 0x67, 0x6f, 0x75, 0x66,
			0x6b, 0x76, 0x6f, 0x6b, 0x6a, 0x2e, 0x69, 0x6e,
			0x76, 0x61, 0x6c, 0x69, 0x64, 0x3b, 0x74, 0x72,
			0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x3d,
			0x77, 0x73, 0x3e, 0x3b, 0x2b, 0x73, 0x69, 0x70,
			0x2e, 0x69, 0x63, 0x65, 0x3b, 0x72, 0x65, 0x67,
			0x2d, 0x69, 0x64, 0x3d, 0x31, 0x3b, 0x2b, 0x73,
			0x69, 0x70, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
			0x6e, 0x63, 0x65, 0x3d, 0x22, 0x3c, 0x75, 0x72,
			0x6e, 0x3a, 0x75, 0x75, 0x69, 0x64, 0x3a, 0x65,
			0x38, 0x38, 0x62, 0x39, 0x32, 0x33, 0x64, 0x2d,
			0x32, 0x35, 0x39, 0x65, 0x2d, 0x34, 0x65, 0x65,
			0x64, 0x2d, 0x61, 0x38, 0x30, 0x33, 0x2d, 0x38,
			0x65, 0x63, 0x37, 0x63, 0x34, 0x38, 0x64, 0x36,
			0x63, 0x62, 0x30, 0x3e, 0x22, 0x3b, 0x65, 0x78,
			0x70, 0x69, 0x72, 0x65, 0x73, 0x3d, 0x36, 0x30,
			0x30, 0x0d, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72,
			0x65, 0x73, 0x3a, 0x20, 0x36, 0x30, 0x30, 0x0d,
			0x0a, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x3a, 0x20,
			0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x2c, 0x41,
			0x43, 0x4b, 0x2c, 0x43, 0x41, 0x4e, 0x43, 0x45,
			0x4c, 0x2c, 0x42, 0x59, 0x45, 0x2c, 0x55, 0x50,
			0x44, 0x41, 0x54, 0x45, 0x2c, 0x4d, 0x45, 0x53,
			0x53, 0x41, 0x47, 0x45, 0x2c, 0x4f, 0x50, 0x54,
			0x49, 0x4f, 0x4e, 0x53, 0x2c, 0x52, 0x45, 0x46,
			0x45, 0x52, 0x2c, 0x49, 0x4e, 0x46, 0x4f, 0x2c,
			0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x0d, 0x0a,
			0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
			0x64, 0x3a, 0x20, 0x70, 0x61, 0x74, 0x68, 0x2c,
			0x67, 0x72, 0x75, 0x75, 0x2c, 0x6f, 0x75, 0x74,
			0x62, 0x6f, 0x75, 0x6e, 0x64, 0x0d, 0x0a, 0x55,
			0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e,
			0x74, 0x3a, 0x20, 0x4a, 0x73, 0x53, 0x49, 0x50,
			0x20, 0x33, 0x2e, 0x37, 0x2e, 0x31, 0x0d, 0x0a,
			0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d,
			0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20,
			0x30, 0x0d, 0x0a, 0x0d, 0x0a,
		}
		frame.Reset()
		if offs, err := frame.Decode(maskedPkt[:], 0); err != ErrHdrOk {
			t.Fatalf("decode error %s", err)
		} else if offs != maskedPktCnt {
			t.Fatalf("expected offs: %d, got offs: %d", int(frame.Len()), offs)
		}
		var dst [2048]byte
		if pd, length, err := frame.PayloadData(dst[:], maskedPkt[:]); err != nil {
			t.Fatalf("frame processing error: %s", err)
		} else if !bytes.Equal(pd[0:length], pktBytes) {
			t.Fatalf("content mismatch, expected:\n%v\ngot:\n%v", string(pktBytes), string(pd[0:length]))
		}
	})
}
